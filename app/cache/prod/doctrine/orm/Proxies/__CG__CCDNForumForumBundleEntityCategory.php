<?php

namespace Proxies\__CG__\CCDNForum\ForumBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Category extends \CCDNForum\ForumBundle\Entity\Category implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function forumName()
    {
        $this->__load();
        return parent::forumName();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getListOrderPriority()
    {
        $this->__load();
        return parent::getListOrderPriority();
    }

    public function setListOrderPriority($listOrderPriority)
    {
        $this->__load();
        return parent::setListOrderPriority($listOrderPriority);
    }

    public function getReadAuthorisedRoles()
    {
        $this->__load();
        return parent::getReadAuthorisedRoles();
    }

    public function setReadAuthorisedRoles(array $roles = NULL)
    {
        $this->__load();
        return parent::setReadAuthorisedRoles($roles);
    }

    public function hasReadAuthorisedRole($role)
    {
        $this->__load();
        return parent::hasReadAuthorisedRole($role);
    }

    public function isAuthorisedToRead(\Symfony\Component\Security\Core\SecurityContextInterface $securityContext)
    {
        $this->__load();
        return parent::isAuthorisedToRead($securityContext);
    }

    public function getForum()
    {
        $this->__load();
        return parent::getForum();
    }

    public function setForum(\CCDNForum\ForumBundle\Entity\Forum $forum = NULL)
    {
        $this->__load();
        return parent::setForum($forum);
    }

    public function getBoards()
    {
        $this->__load();
        return parent::getBoards();
    }

    public function setBoards(\Doctrine\Common\Collections\ArrayCollection $boards = NULL)
    {
        $this->__load();
        return parent::setBoards($boards);
    }

    public function addBoard(\CCDNForum\ForumBundle\Entity\Board $board)
    {
        $this->__load();
        return parent::addBoard($board);
    }

    public function removeBoard(\CCDNForum\ForumBundle\Entity\Board $board)
    {
        $this->__load();
        return parent::removeBoard($board);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'listOrderPriority', 'readAuthorisedRoles', 'boards', 'forum');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}