<?php

namespace Proxies\__CG__\Sdz\BlogBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Article extends \Sdz\BlogBundle\Entity\Article implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function updateDate()
    {
        $this->__load();
        return parent::updateDate();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setDate(\DateTime $date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setContenu($contenu)
    {
        $this->__load();
        return parent::setContenu($contenu);
    }

    public function getContenu()
    {
        $this->__load();
        return parent::getContenu();
    }

    public function setPublication($publication)
    {
        $this->__load();
        return parent::setPublication($publication);
    }

    public function getPublication()
    {
        $this->__load();
        return parent::getPublication();
    }

    public function setImage(\Sdz\BlogBundle\Entity\Image $image = NULL)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function addCommentaire(\Sdz\BlogBundle\Entity\Commentaire $commentaire)
    {
        $this->__load();
        return parent::addCommentaire($commentaire);
    }

    public function removeCommentaire(\Sdz\BlogBundle\Entity\Commentaire $commentaire)
    {
        $this->__load();
        return parent::removeCommentaire($commentaire);
    }

    public function getCommentaires()
    {
        $this->__load();
        return parent::getCommentaires();
    }

    public function setDateEdition(\DateTime $dateEdition)
    {
        $this->__load();
        return parent::setDateEdition($dateEdition);
    }

    public function getDateEdition()
    {
        $this->__load();
        return parent::getDateEdition();
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function setAuthor(\Sdz\UserBundle\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setAuthor($user);
    }

    public function getAuthor()
    {
        $this->__load();
        return parent::getAuthor();
    }

    public function getContenuEn()
    {
        $this->__load();
        return parent::getContenuEn();
    }

    public function setContenuEn($contenuEn)
    {
        $this->__load();
        return parent::setContenuEn($contenuEn);
    }

    public function getContenuDe()
    {
        $this->__load();
        return parent::getContenuDe();
    }

    public function setContenuDe($contenuDe)
    {
        $this->__load();
        return parent::setContenuDe($contenuDe);
    }

    public function getTitreEn()
    {
        $this->__load();
        return parent::getTitreEn();
    }

    public function setTitreEn($titreEn)
    {
        $this->__load();
        return parent::setTitreEn($titreEn);
    }

    public function getTitreDe()
    {
        $this->__load();
        return parent::getTitreDe();
    }

    public function setTitreDe($titreDe)
    {
        $this->__load();
        return parent::setTitreDe($titreDe);
    }

    public function setTranslatableLocale($locale)
    {
        $this->__load();
        return parent::setTranslatableLocale($locale);
    }

    public function contenuValide(\Symfony\Component\Validator\ExecutionContextInterface $context)
    {
        $this->__load();
        return parent::contenuValide($context);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'date', 'titre', 'publication', 'contenu', 'dateEdition', 'slug', 'image', 'commentaires', 'author');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}